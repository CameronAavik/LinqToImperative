using LinqToImperative.Producers;
using System.Linq.Expressions;

namespace LinqToImperative.ExprEnumerable
{
    /// <summary>
    /// Represents an enumerable where there is a single linear sequence of values being produced, and each value
    /// that is produced will then produce another set of enumerable values (such as a flatMap/SelectMany)
    /// </summary>
    internal interface INestedExprEnumerable : IExprEnumerable
    {
        /// <summary>
        /// The base linear producer from which the nested values are generated from.
        /// </summary>
        public IProducer BaseProducer { get; }

        /// <summary>
        /// Takes a parameter representing a value produced by the producer, and returns a new enumerable which
        /// is generated from that parameter.
        /// </summary>
        /// <param name="parameter">The parameter representing a value generated by the base producer.</param>
        /// <returns>The nested enumerable.</returns>
        public IExprEnumerable GetNested(ParameterExpression parameter);
    }
}
