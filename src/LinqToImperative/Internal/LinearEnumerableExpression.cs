using System;
using System.Linq;
using System.Linq.Expressions;

namespace LinqToImperative.Internal
{
    /// <summary>
    /// A class that defines a linear enumerable imperatively using expressions.
    /// </summary>
    public class LinearEnumerableExpression : EnumerableExpression
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LinearEnumerableExpression"/> class.
        /// </summary>
        /// <param name="initialize">Expression for initializing the enumerable.</param>
        /// <param name="hasNext">Expression for checking if there is a next element.</param>
        /// <param name="moveNext">Expression for moving to the next element.</param>
        /// <param name="elementType">Type of the element of the enumerable.</param>
        public LinearEnumerableExpression(
            Func<Expression, Expression> initialize,
            Expression hasNext,
            Func<Func<ParameterExpression, Expression>, Expression> moveNext,
            Type elementType)
        {
            this.Initialize = initialize ?? throw new ArgumentNullException(nameof(initialize));
            this.HasNext = hasNext ?? throw new ArgumentNullException(nameof(hasNext));
            this.MoveNext = moveNext ?? throw new ArgumentNullException(nameof(moveNext));
            this.ElementType = elementType ?? throw new ArgumentNullException(nameof(elementType));
        }

        /// <summary>
        /// Gets the function that initializes all the variables and calls a continuation.<br/>
        /// - The single parameter to this Func is a continuation to run after initializing all
        ///   the variables for the enumerable.<br/>
        /// - The expression returned represents the initialization of the variables followed by
        ///   calling the continuation.
        /// </summary>
        public Func<Expression, Expression> Initialize { get; init; }

        /// <summary>
        /// Gets an expression of type bool that returns true if the enumerable has more elements.
        /// </summary>
        public Expression HasNext { get; init; }

        /// <summary>
        /// Gets a function which updates the current element and passes it into a continuation.
        /// - The single parameter to this lambda is a continuation to run by passing in the value
        ///   generated by the enumerable.<br/>
        /// - The expression returned represents the code to move to the next value of the
        ///   enumerable and then pass the new value into the continuation.
        /// </summary>
        public Func<Func<ParameterExpression, Expression>, Expression> MoveNext { get; init; }

        /// <inheritdoc/>
        public override Type ElementType { get; }
    }
}
